/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GCPPeeringObservation struct {
	AutoCreateRoutes *bool `json:"autoCreateRoutes,omitempty" tf:"auto_create_routes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	StateDetails *string `json:"stateDetails,omitempty" tf:"state_details,omitempty"`
}

type GCPPeeringParameters struct {

	// Instance identifier
	// +kubebuilder:validation:Required
	InstanceID *float64 `json:"instanceId" tf:"instance_id,omitempty"`

	// VPC network uri
	// +kubebuilder:validation:Required
	PeerNetworkURI *string `json:"peerNetworkUri" tf:"peer_network_uri,omitempty"`
}

// GCPPeeringSpec defines the desired state of GCPPeering
type GCPPeeringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GCPPeeringParameters `json:"forProvider"`
}

// GCPPeeringStatus defines the observed state of GCPPeering.
type GCPPeeringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GCPPeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GCPPeering is the Schema for the GCPPeerings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type GCPPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GCPPeeringSpec   `json:"spec"`
	Status            GCPPeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GCPPeeringList contains a list of GCPPeerings
type GCPPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GCPPeering `json:"items"`
}

// Repository type metadata.
var (
	GCPPeering_Kind             = "GCPPeering"
	GCPPeering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GCPPeering_Kind}.String()
	GCPPeering_KindAPIVersion   = GCPPeering_Kind + "." + CRDGroupVersion.String()
	GCPPeering_GroupVersionKind = CRDGroupVersion.WithKind(GCPPeering_Kind)
)

func init() {
	SchemeBuilder.Register(&GCPPeering{}, &GCPPeeringList{})
}
