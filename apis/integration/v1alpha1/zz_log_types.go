/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LogParameters struct {

	// The API key for the integration service. (Datadog)
	// +kubebuilder:validation:Optional
	APIKeySecretRef *v1.SecretKeySelector `json:"apiKeySecretRef,omitempty" tf:"-"`

	// AWS access key identifier. (Cloudwatch)
	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef *v1.SecretKeySelector `json:"accessKeyIdSecretRef,omitempty" tf:"-"`

	// The client email. (Stackdriver)
	// +kubebuilder:validation:Optional
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// Destination to send the logs. (Splunk)
	// +kubebuilder:validation:Optional
	HostPort *string `json:"hostPort,omitempty" tf:"host_port,omitempty"`

	// Instance identifier used to make proxy calls
	// +kubebuilder:validation:Required
	InstanceID *float64 `json:"instanceId" tf:"instance_id,omitempty"`

	// The private key. (Stackdriver)
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Project ID. (Stackdriver)
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region hosting integration service. (Cloudwatch, Datadog)
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// AWS secret access key. (Cloudwatch)
	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef *v1.SecretKeySelector `json:"secretAccessKeySecretRef,omitempty" tf:"-"`

	// (optional) tags. E.g. env=prod,region=europe. (Datadog)
	// +kubebuilder:validation:Optional
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The token used for authentication. (Loggly, Logentries, Splunk)
	// +kubebuilder:validation:Optional
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`

	// The URL to push the logs to. (Papertrail)
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// LogSpec defines the desired state of Log
type LogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogParameters `json:"forProvider"`
}

// LogStatus defines the observed state of Log.
type LogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Log is the Schema for the Logs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type Log struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogSpec   `json:"spec"`
	Status            LogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogList contains a list of Logs
type LogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Log `json:"items"`
}

// Repository type metadata.
var (
	Log_Kind             = "Log"
	Log_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Log_Kind}.String()
	Log_KindAPIVersion   = Log_Kind + "." + CRDGroupVersion.String()
	Log_GroupVersionKind = CRDGroupVersion.WithKind(Log_Kind)
)

func init() {
	SchemeBuilder.Register(&Log{}, &LogList{})
}
