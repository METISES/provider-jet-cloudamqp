/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetricObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MetricParameters struct {

	// The API key for the integration service. (Librato)
	// +kubebuilder:validation:Optional
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// AWS access key identifier. (Cloudwatch)
	// +kubebuilder:validation:Optional
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// The client email. (Stackdriver)
	// +kubebuilder:validation:Optional
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// The email address registred for the integration service. (Librato)
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Instance identifier
	// +kubebuilder:validation:Required
	InstanceID *float64 `json:"instanceId" tf:"instance_id,omitempty"`

	// The license key registred for the integration service. (New Relic)
	// +kubebuilder:validation:Optional
	LicenseKey *string `json:"licenseKey,omitempty" tf:"license_key,omitempty"`

	// The private key. (Stackdriver)
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Project ID. (Stackdriver)
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (optional) allowlist using regular expression
	// +kubebuilder:validation:Optional
	QueueAllowlist *string `json:"queueAllowlist,omitempty" tf:"queue_allowlist,omitempty"`

	// **Deprecated**
	// +kubebuilder:validation:Optional
	QueueWhitelist *string `json:"queueWhitelist,omitempty" tf:"queue_whitelist,omitempty"`

	// AWS region for Cloudwatch and [US/EU] for Data dog/New relic. (Cloudwatch, Data Dog, New Relic)
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// AWS secret key. (Cloudwatch)
	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef *v1.SecretKeySelector `json:"secretAccessKeySecretRef,omitempty" tf:"-"`

	// (optional) tags. E.g. env=prod,region=europe
	// +kubebuilder:validation:Optional
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (optional) allowlist using regular expression
	// +kubebuilder:validation:Optional
	VhostAllowlist *string `json:"vhostAllowlist,omitempty" tf:"vhost_allowlist,omitempty"`

	// **Deprecated**
	// +kubebuilder:validation:Optional
	VhostWhitelist *string `json:"vhostWhitelist,omitempty" tf:"vhost_whitelist,omitempty"`
}

// MetricSpec defines the desired state of Metric
type MetricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetricParameters `json:"forProvider"`
}

// MetricStatus defines the observed state of Metric.
type MetricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Metric is the Schema for the Metrics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type Metric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetricSpec   `json:"spec"`
	Status            MetricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetricList contains a list of Metrics
type MetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Metric `json:"items"`
}

// Repository type metadata.
var (
	Metric_Kind             = "Metric"
	Metric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Metric_Kind}.String()
	Metric_KindAPIVersion   = Metric_Kind + "." + CRDGroupVersion.String()
	Metric_GroupVersionKind = CRDGroupVersion.WithKind(Metric_Kind)
)

func init() {
	SchemeBuilder.Register(&Metric{}, &MetricList{})
}
