/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CommunityObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CommunityParameters struct {

	// If the plugin is enabled
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Instance identifier
	// +kubebuilder:validation:Required
	InstanceID *float64 `json:"instanceId" tf:"instance_id,omitempty"`
}

// CommunitySpec defines the desired state of Community
type CommunitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CommunityParameters `json:"forProvider"`
}

// CommunityStatus defines the observed state of Community.
type CommunityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CommunityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Community is the Schema for the Communitys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type Community struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CommunitySpec   `json:"spec"`
	Status            CommunityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CommunityList contains a list of Communitys
type CommunityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Community `json:"items"`
}

// Repository type metadata.
var (
	Community_Kind             = "Community"
	Community_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Community_Kind}.String()
	Community_KindAPIVersion   = Community_Kind + "." + CRDGroupVersion.String()
	Community_GroupVersionKind = CRDGroupVersion.WithKind(Community_Kind)
)

func init() {
	SchemeBuilder.Register(&Community{}, &CommunityList{})
}
