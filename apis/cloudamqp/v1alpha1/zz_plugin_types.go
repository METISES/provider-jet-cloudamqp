/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PluginObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PluginParameters struct {

	// If the plugin is enabled
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Instance identifier
	// +kubebuilder:validation:Required
	InstanceID *float64 `json:"instanceId" tf:"instance_id,omitempty"`
}

// PluginSpec defines the desired state of Plugin
type PluginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PluginParameters `json:"forProvider"`
}

// PluginStatus defines the observed state of Plugin.
type PluginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PluginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Plugin is the Schema for the Plugins API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type Plugin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PluginSpec   `json:"spec"`
	Status            PluginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PluginList contains a list of Plugins
type PluginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Plugin `json:"items"`
}

// Repository type metadata.
var (
	Plugin_Kind             = "Plugin"
	Plugin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Plugin_Kind}.String()
	Plugin_KindAPIVersion   = Plugin_Kind + "." + CRDGroupVersion.String()
	Plugin_GroupVersionKind = CRDGroupVersion.WithKind(Plugin_Kind)
)

func init() {
	SchemeBuilder.Register(&Plugin{}, &PluginList{})
}
