/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceObservation struct {
	Dedicated *bool `json:"dedicated,omitempty" tf:"dedicated,omitempty"`

	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	HostInternal *string `json:"hostInternal,omitempty" tf:"host_internal,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ready *bool `json:"ready,omitempty" tf:"ready,omitempty"`

	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type InstanceParameters struct {

	// Set to true to not create default alarms
	// +kubebuilder:validation:Optional
	NoDefaultAlarms *bool `json:"noDefaultAlarms,omitempty" tf:"no_default_alarms,omitempty"`

	// Number of nodes in cluster (plan must support it)
	// +kubebuilder:validation:Optional
	Nodes *float64 `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// Name of the plan, see documentation for valid plans
	// +kubebuilder:validation:Required
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// Name of the region you want to create your instance in
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// RabbitMQ version
	// +kubebuilder:validation:Optional
	RmqVersion *string `json:"rmqVersion,omitempty" tf:"rmq_version,omitempty"`

	// Tag the instances with optional tags
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the VPC to create your instance in
	// +kubebuilder:validation:Optional
	VPCID *float64 `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	// +kubebuilder:validation:Optional
	VPCSubnet *string `json:"vpcSubnet,omitempty" tf:"vpc_subnet,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
