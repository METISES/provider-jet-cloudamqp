/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AlarmParameters struct {

	// Enable or disable an alarm
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Instance identifier
	// +kubebuilder:validation:Required
	InstanceID *float64 `json:"instanceId" tf:"instance_id,omitempty"`

	// Message types (total, unacked, ready) of the queue to trigger the alarm
	// +kubebuilder:validation:Optional
	MessageType *string `json:"messageType,omitempty" tf:"message_type,omitempty"`

	// Regex for which queues to check
	// +kubebuilder:validation:Optional
	QueueRegex *string `json:"queueRegex,omitempty" tf:"queue_regex,omitempty"`

	// Identifiers for recipients to be notified.
	// +kubebuilder:validation:Required
	Recipients []*float64 `json:"recipients" tf:"recipients,omitempty"`

	// For how long (in seconds) the value_threshold should be active before trigger alarm
	// +kubebuilder:validation:Optional
	TimeThreshold *float64 `json:"timeThreshold,omitempty" tf:"time_threshold,omitempty"`

	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count, net_split
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// What value to trigger the alarm for
	// +kubebuilder:validation:Optional
	ValueThreshold *float64 `json:"valueThreshold,omitempty" tf:"value_threshold,omitempty"`

	// Regex for which vhost the queues are in
	// +kubebuilder:validation:Optional
	VhostRegex *string `json:"vhostRegex,omitempty" tf:"vhost_regex,omitempty"`
}

// AlarmSpec defines the desired state of Alarm
type AlarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmParameters `json:"forProvider"`
}

// AlarmStatus defines the observed state of Alarm.
type AlarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Alarm is the Schema for the Alarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqpjet}
type Alarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmSpec   `json:"spec"`
	Status            AlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmList contains a list of Alarms
type AlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alarm `json:"items"`
}

// Repository type metadata.
var (
	Alarm_Kind             = "Alarm"
	Alarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Alarm_Kind}.String()
	Alarm_KindAPIVersion   = Alarm_Kind + "." + CRDGroupVersion.String()
	Alarm_GroupVersionKind = CRDGroupVersion.WithKind(Alarm_Kind)
)

func init() {
	SchemeBuilder.Register(&Alarm{}, &AlarmList{})
}
